package com.rohit.test;

class UnionFindSolution {
    public boolean validTree(int n, int[][] edges) {

        if (edges.length != n - 1) return false;

        // Condition 1: The graph must contain n - 1 edges.
        if (edges.length != n - 1) return false;

        // Condition 2: The graph must contain a single connected component.
        // Create a new UnionFind object with n nodes.
        UnionFind unionFind = new UnionFind(n);
        // Add each edge. Check if a merge happened, because if it
        // didn't, there must be a cycle.

        for (int [] edge : edges ) {
            if(!unionFind.union(edge[0],edge[1]))
                return false;
        }
        return true;
    }
}

class UnionFind {

    private int parent[];
    private int size [];

    public UnionFind(int n) {

        parent = new int[n];
        size = new int[n];

        for(int i=0; i<n ; i++) {
            parent[i]=i;
            size[i]=1;
        }
    }

    private int find(int A) {

        int root = A;
        while(root!=parent[root]) {
            root = parent[root];
        }

        while(A!=root) {
            int oldRoot = parent[A];
            parent[A] = root;
            A = oldRoot;
        }
        return root;
    }

    public boolean union(int A, int B) {

        int rootA = find(A);
        int rootB = find(B);

        if (rootA == rootB) {
            return false;
        }

        if(size[rootA] < size[rootB]) {
            parent[rootA]=rootB;
            size[rootB]+=size[rootA];
        }
        else {
            parent[rootB] = rootA;
            size[rootA]+=size[rootB];
        }

        return true;
    }
}
